
{
  "name": "dotted-disperse-areachart",
  "type": "registry:ui",
  "registryDependencies": ["chart"],
  "dependencies": ["recharts", "motion"],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "dotted-disperse-areachart.tsx",
      "type": "registry:ui",
    "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { motion } from \"motion/react\"\nimport { TrendingUp } from \"lucide-react\"\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\"\n\nexport const description = \"A stacked area chart\"\n\nconst chartData = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n\nexport function DottedAreaChart() {\n\n  const [hovered, setHovered] = useState(false)\n\n  {\n    //Generating dots matrix for the pattern\n  }\n  const rows = 6\n  const cols = 15\n  const spacing = 20\n  const dotRadius = 3\n\n  const dots = []\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      dots.push({\n        id: `${row}-${col}`,\n        cx: col * spacing + 10,\n        cy: row * spacing + 10,\n      })\n    }\n  }\n\n  return (\n\n    <>\n      <Card className=\"rounded-none border-none\"\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}>\n        <CardHeader>\n          <CardTitle>Area Chart</CardTitle>\n          <CardDescription>\n            Showing total visitors for the last 6 months\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ChartContainer config={chartConfig}>\n            <AreaChart\n              accessibilityLayer\n              data={chartData}\n              margin={{\n                left: 12,\n                right: 12,\n              }}\n\n            >\n              <CartesianGrid vertical={false} />\n              <XAxis\n                dataKey=\"month\"\n                tickLine={false}\n                axisLine={false}\n                tickMargin={8}\n                tickFormatter={(value) => value.slice(0, 3)}\n              />\n              <ChartTooltip\n                cursor={false}\n                content={<ChartTooltipContent indicator=\"dot\" />}\n              />\n\n              <defs>\n                {/* Animated Pattern */}\n\n                <pattern\n                  id=\"dotGridPattern\"\n                  patternUnits=\"userSpaceOnUse\"\n                  width={cols * spacing}\n                  height={rows * spacing}\n                >\n                  {dots.map((dot) => {\n                    const angle = Math.random() * Math.PI * 2;\n                    const distance = 15 + Math.random() * 10;\n                    const targetCx = dot.cx + Math.cos(angle) * distance;\n                    const targetCy = dot.cy + Math.sin(angle) * distance;\n\n                    return (\n                      <motion.circle\n                        key={dot.id}\n                        cx={dot.cx}\n                        cy={dot.cy}\n                        r={dotRadius}\n                        fill=\"#555\"\n                        animate={\n                          hovered\n                            ? { cx: targetCx, cy: targetCy, opacity: 0.5 }\n                            : { cx: dot.cx, cy: dot.cy, opacity: 1 }\n                        }\n                        transition={{ duration: 0.5, ease: \"easeOut\" }}\n                      />\n                    );\n                  })}\n                </pattern>\n\n                {/* Glow filter */}\n                <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                  <feGaussianBlur stdDeviation=\"3\" result=\"blur\" />\n                  <feMerge>\n                    <feMergeNode in=\"blur\" />\n                    <feMergeNode in=\"SourceGraphic\" />\n                  </feMerge>\n                </filter>\n              </defs>\n\n              <Area\n                dataKey=\"desktop\"\n                type=\"natural\"\n                fill=\"url(#dotGridPattern)\"\n                fillOpacity={0.4}\n                stroke=\"var(--foreground)\"\n                filter=\"url(#glow)\"\n              />\n            </AreaChart>\n          </ChartContainer>\n        </CardContent>\n        <CardFooter>\n          <div className=\"flex w-full items-start gap-2 text-sm\">\n            <div className=\"grid gap-2\">\n              <div className=\"flex items-center gap-2 leading-none font-medium\">\n                Trending up by 5.2% this month <TrendingUp className=\"h-4 w-4\" />\n              </div>\n              <div className=\"text-muted-foreground flex items-center gap-2 leading-none\">\n                January - June 2024\n              </div>\n            </div>\n          </div>\n        </CardFooter>\n      </Card>\n\n    </>\n  )\n}"}
     ]
}
